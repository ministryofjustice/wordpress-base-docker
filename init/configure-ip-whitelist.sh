#!/bin/sh

##
# Generate the whitelists for nginx
# These are generated at runtime based on environment variables
#
# LOGIN_WHITELIST_IPS - Whitelist the wp-login page (optional, default open to public)
# SITE_WHITELIST_IPS  - Whitelist the whole site (optional, default open to public)
#
# Define which IPs you want whitelisted in the relevant environment varables.
# Separate multiple IP addresses with commas.
#   e.g. LOGIN_WHITELIST_IPS=xxx.xxx.xxx.xxx,yyy.yyy.yyy.yyy,zzz.zzz.zzz.zzz
#
# The following config files will be generated:
#   /etc/nginx/whitelists/wp-login.conf
#   /etc/nginx/whitelists/site-wide.conf
##

generate_whitelist() {
	local IP_ADDRESSES=${1}

	echo "# This file was auto-generated by the init script 'configure-ip-whitelist.sh'."

	# Whitelist localhost
	echo "allow 127.0.0.1;"

	# Whitelist load balancers (to allow for ELB health checks)
	if [ ! -z "$LB_IP_RANGE" ]
	then
		echo "allow ${LB_IP_RANGE};"
	fi

	# Whitelist pingdom
	echo "include /etc/nginx/whitelists/pingdom.conf;"

	echo
	echo "### BEGIN ENVIRONMENT ###"
	echo "# These IP addresses came from the runtime environment."
	for IP in $(echo $IP_ADDRESSES | tr "," "\n")
	do
		echo "allow ${IP};"
	done
	echo "### END ENVIRONMENTÂ ###"
	echo

	# Deny access to everyone else
	echo "deny all;"
}

if [ ! -z "$LOGIN_WHITELIST_IPS" ]
then
	generate_whitelist "$LOGIN_WHITELIST_IPS" > /etc/nginx/whitelists/wp-login.conf
fi

if [ ! -z "$SITE_WHITELIST_IPS" ]
then
	generate_whitelist "$SITE_WHITELIST_IPS" > /etc/nginx/whitelists/site-wide.conf
fi
