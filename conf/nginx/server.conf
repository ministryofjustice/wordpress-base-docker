# Set rate limit zone 'flood'
limit_req_zone $binary_remote_addr zone=flood:15m rate=5r/s;

# Sets a $real_scheme variable whose value is the scheme passed by the load
# balancer in X-Forwarded-Proto (if any), defaulting to $scheme.
# Similar to how the HttpRealIp module treats X-Forwarded-For.
map $http_x_forwarded_proto $real_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# Configure fastcgi cache
fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=pub01:100m inactive=60m;
fastcgi_cache_use_stale updating error timeout invalid_header http_500;
fastcgi_cache_key "$real_scheme$request_method$host$request_uri";

server {
	##
	# THE BASICS
	##

	listen 80 default_server;

	root /bedrock/web;
	index index.php;

	client_max_body_size 250m;

	# Check and enable RealIP
	include /etc/nginx/real_ip.conf;

	if ($http_x_forwarded_proto = "https") {
		set $use_ssl "on";
	}

	# Rewrite old upload URLs to the bedrock equivalent
	location /wp-content/uploads/ {
		rewrite ^/wp-content/uploads/(.*)$ /app/uploads/$1 permanent;
	}

	##
	# CACHING
	##

	# Cache the request, unless...
	set $skip_cache 0;

	# ...it's a POST request
	if ($request_method = POST) {
		set $skip_cache 1;
	}

	# ...there are query string parameters
	if ($query_string != "") {
		set $skip_cache 1;
	}

	# ...it's for a special WordPress URL which should not be cached (including wp-admin)
	if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
		set $skip_cache 1;
	}

	# ...it's from a logged in user, or the cookie 'wordpress_no_cache' exists
	if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
		set $skip_cache 1;
	}

	location / {
		# First attempt to serve request as file, then
		# as a directory, then pass the request to
		# WordPress's front controller.
		try_files $uri $uri/ /index.php?$args;
	}

	##
	# SECURITY
	##

	server_tokens off;

	# Frontend IP whitelist
	include /etc/nginx/whitelists/site-wide.conf;

	# deny access to dotfiles accept .well-known
	# this will deny access to .git, .htaccess, .env, and other sensitive files
	location ~ /\.(?!well-known).* {
        deny all;
    }

	# Deny access to any files with a .php extension in the uploads directory
	# Works in sub-directory installs and also in multisite network
	# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
	location ~* /(?:uploads|files)/.*\.php$ {
		deny all;
	}

	##
	# PHP
	##

	# pass PHP requests to php-fpm
	location ~ \.php$ {
		include /etc/nginx/php-fpm.conf;
	}

	# WordPress admin IP whitelist
	location = /wp/wp-login.php {
		limit_req zone=flood burst=5 nodelay;

		include /etc/nginx/whitelists/wp-login.conf;
		include /etc/nginx/php-fpm.conf;
	}

	location ~ /purge-cache(/.*) {
		fastcgi_cache_purge pub01 "$real_scheme$request_method$host$1";
	}

	location = /robots.txt { access_log off; log_not_found off; }

	##
	# GZIP COMPRESSION
	##

	gzip on;
	gzip_disable "msie6";

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;
}
